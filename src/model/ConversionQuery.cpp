/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Tradewatch/model/ConversionQuery.h"

namespace io {
namespace tradewatch {
namespace client {
namespace model {



ConversionQuery::ConversionQuery()
{
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_To = utility::conversions::to_string_t("");
    m_ToIsSet = false;
    m_Amount = 0.0;
    m_AmountIsSet = false;
    m_Precision = 0;
    m_PrecisionIsSet = false;
}

ConversionQuery::~ConversionQuery()
{
}

void ConversionQuery::validate()
{
    // TODO: implement validation
}

web::json::value ConversionQuery::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_AmountIsSet)
    {
        val[utility::conversions::to_string_t(U("amount"))] = ModelBase::toJson(m_Amount);
    }
    if(m_PrecisionIsSet)
    {
        val[utility::conversions::to_string_t(U("precision"))] = ModelBase::toJson(m_Precision);
    }

    return val;
}

bool ConversionQuery::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("amount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("amount")));
        if(!fieldValue.is_null())
        {
            double refVal_setAmount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
            setAmount(refVal_setAmount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("precision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("precision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPrecision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrecision);
            setPrecision(refVal_setPrecision);
        }
    }
    return ok;
}

void ConversionQuery::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_AmountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
    }
    if(m_PrecisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("precision")), m_Precision));
    }
}

bool ConversionQuery::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        utility::string_t refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("amount"))))
    {
        double refVal_setAmount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("amount"))), refVal_setAmount );
        setAmount(refVal_setAmount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("precision"))))
    {
        int32_t refVal_setPrecision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("precision"))), refVal_setPrecision );
        setPrecision(refVal_setPrecision);
    }
    return ok;
}

utility::string_t ConversionQuery::getFrom() const
{
    return m_From;
}

void ConversionQuery::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool ConversionQuery::fromIsSet() const
{
    return m_FromIsSet;
}

void ConversionQuery::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t ConversionQuery::getTo() const
{
    return m_To;
}

void ConversionQuery::setTo(const utility::string_t& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool ConversionQuery::toIsSet() const
{
    return m_ToIsSet;
}

void ConversionQuery::unsetTo()
{
    m_ToIsSet = false;
}
double ConversionQuery::getAmount() const
{
    return m_Amount;
}

void ConversionQuery::setAmount(double value)
{
    m_Amount = value;
    m_AmountIsSet = true;
}

bool ConversionQuery::amountIsSet() const
{
    return m_AmountIsSet;
}

void ConversionQuery::unsetAmount()
{
    m_AmountIsSet = false;
}
int32_t ConversionQuery::getPrecision() const
{
    return m_Precision;
}

void ConversionQuery::setPrecision(int32_t value)
{
    m_Precision = value;
    m_PrecisionIsSet = true;
}

bool ConversionQuery::precisionIsSet() const
{
    return m_PrecisionIsSet;
}

void ConversionQuery::unsetPrecision()
{
    m_PrecisionIsSet = false;
}
}
}
}
}


