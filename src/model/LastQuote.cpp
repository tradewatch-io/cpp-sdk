/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.11.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Tradewatch/model/LastQuote.h"

namespace io {
namespace tradewatch {
namespace client {
namespace model {



LastQuote::LastQuote()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Ask = 0.0;
    m_AskIsSet = false;
    m_Bid = 0.0;
    m_BidIsSet = false;
    m_Mid = 0.0;
    m_MidIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
}

LastQuote::~LastQuote()
{
}

void LastQuote::validate()
{
    // TODO: implement validation
}

web::json::value LastQuote::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_AskIsSet)
    {
        val[utility::conversions::to_string_t(U("ask"))] = ModelBase::toJson(m_Ask);
    }
    if(m_BidIsSet)
    {
        val[utility::conversions::to_string_t(U("bid"))] = ModelBase::toJson(m_Bid);
    }
    if(m_MidIsSet)
    {
        val[utility::conversions::to_string_t(U("mid"))] = ModelBase::toJson(m_Mid);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool LastQuote::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ask"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ask")));
        if(!fieldValue.is_null())
        {
            double refVal_setAsk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAsk);
            setAsk(refVal_setAsk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bid")));
        if(!fieldValue.is_null())
        {
            double refVal_setBid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBid);
            setBid(refVal_setBid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mid")));
        if(!fieldValue.is_null())
        {
            double refVal_setMid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMid);
            setMid(refVal_setMid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void LastQuote::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_AskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ask")), m_Ask));
    }
    if(m_BidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bid")), m_Bid));
    }
    if(m_MidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mid")), m_Mid));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool LastQuote::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ask"))))
    {
        double refVal_setAsk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ask"))), refVal_setAsk );
        setAsk(refVal_setAsk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bid"))))
    {
        double refVal_setBid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bid"))), refVal_setBid );
        setBid(refVal_setBid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mid"))))
    {
        double refVal_setMid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mid"))), refVal_setMid );
        setMid(refVal_setMid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        int32_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::string_t LastQuote::getSymbol() const
{
    return m_Symbol;
}

void LastQuote::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool LastQuote::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void LastQuote::unsetSymbol()
{
    m_SymbolIsSet = false;
}
double LastQuote::getAsk() const
{
    return m_Ask;
}

void LastQuote::setAsk(double value)
{
    m_Ask = value;
    m_AskIsSet = true;
}

bool LastQuote::askIsSet() const
{
    return m_AskIsSet;
}

void LastQuote::unsetAsk()
{
    m_AskIsSet = false;
}
double LastQuote::getBid() const
{
    return m_Bid;
}

void LastQuote::setBid(double value)
{
    m_Bid = value;
    m_BidIsSet = true;
}

bool LastQuote::bidIsSet() const
{
    return m_BidIsSet;
}

void LastQuote::unsetBid()
{
    m_BidIsSet = false;
}
double LastQuote::getMid() const
{
    return m_Mid;
}

void LastQuote::setMid(double value)
{
    m_Mid = value;
    m_MidIsSet = true;
}

bool LastQuote::midIsSet() const
{
    return m_MidIsSet;
}

void LastQuote::unsetMid()
{
    m_MidIsSet = false;
}
int32_t LastQuote::getTimestamp() const
{
    return m_Timestamp;
}

void LastQuote::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool LastQuote::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void LastQuote::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}
}
}
}


