/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Tradewatch/model/Country.h"

namespace io {
namespace tradewatch {
namespace client {
namespace model {


namespace
{
using EnumUnderlyingType = utility::string_t;

Country::eCountry toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("fr")))
        return Country::eCountry::Country_FR;
    if (val == utility::conversions::to_string_t(U("us")))
        return Country::eCountry::Country_US;
    if (val == utility::conversions::to_string_t(U("de")))
        return Country::eCountry::Country_DE;
    if (val == utility::conversions::to_string_t(U("nz")))
        return Country::eCountry::Country_NZ;
    if (val == utility::conversions::to_string_t(U("nl")))
        return Country::eCountry::Country_NL;
    if (val == utility::conversions::to_string_t(U("uk")))
        return Country::eCountry::Country_UK;
    if (val == utility::conversions::to_string_t(U("es")))
        return Country::eCountry::Country_ES;
    if (val == utility::conversions::to_string_t(U("cn")))
        return Country::eCountry::Country_CN;
    if (val == utility::conversions::to_string_t(U("ch")))
        return Country::eCountry::Country_CH;
    if (val == utility::conversions::to_string_t(U("gr")))
        return Country::eCountry::Country_GR;
    if (val == utility::conversions::to_string_t(U("be")))
        return Country::eCountry::Country_BE;
    if (val == utility::conversions::to_string_t(U("pt")))
        return Country::eCountry::Country_PT;
    if (val == utility::conversions::to_string_t(U("it")))
        return Country::eCountry::Country_IT;
    if (val == utility::conversions::to_string_t(U("all")))
        return Country::eCountry::Country_ALL;
    return {};
}

EnumUnderlyingType fromEnum(Country::eCountry e)
{
    switch (e)
    {
    case Country::eCountry::Country_FR:
        return U("fr");
    case Country::eCountry::Country_US:
        return U("us");
    case Country::eCountry::Country_DE:
        return U("de");
    case Country::eCountry::Country_NZ:
        return U("nz");
    case Country::eCountry::Country_NL:
        return U("nl");
    case Country::eCountry::Country_UK:
        return U("uk");
    case Country::eCountry::Country_ES:
        return U("es");
    case Country::eCountry::Country_CN:
        return U("cn");
    case Country::eCountry::Country_CH:
        return U("ch");
    case Country::eCountry::Country_GR:
        return U("gr");
    case Country::eCountry::Country_BE:
        return U("be");
    case Country::eCountry::Country_PT:
        return U("pt");
    case Country::eCountry::Country_IT:
        return U("it");
    case Country::eCountry::Country_ALL:
        return U("all");
    default:
        break;
    }
    return {};
}
}

Country::Country()
{
}

Country::~Country()
{
}

void Country::validate()
{
    // TODO: implement validation
}

web::json::value Country::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool Country::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void Country::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Country::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

Country::eCountry Country::getValue() const
{
   return m_value;
}

void Country::setValue(Country::eCountry const value)
{
   m_value = value;
}


}
}
}
}


