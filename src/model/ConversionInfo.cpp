/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Tradewatch/model/ConversionInfo.h"

namespace io {
namespace tradewatch {
namespace client {
namespace model {



ConversionInfo::ConversionInfo()
{
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Rate = 0.0;
    m_RateIsSet = false;
}

ConversionInfo::~ConversionInfo()
{
}

void ConversionInfo::validate()
{
    // TODO: implement validation
}

web::json::value ConversionInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_RateIsSet)
    {
        val[utility::conversions::to_string_t(U("rate"))] = ModelBase::toJson(m_Rate);
    }

    return val;
}

bool ConversionInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rate")));
        if(!fieldValue.is_null())
        {
            double refVal_setRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRate);
            setRate(refVal_setRate);
        }
    }
    return ok;
}

void ConversionInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_RateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rate")), m_Rate));
    }
}

bool ConversionInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        int32_t refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rate"))))
    {
        double refVal_setRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rate"))), refVal_setRate );
        setRate(refVal_setRate);
    }
    return ok;
}

int32_t ConversionInfo::getTimestamp() const
{
    return m_Timestamp;
}

void ConversionInfo::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool ConversionInfo::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void ConversionInfo::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
double ConversionInfo::getRate() const
{
    return m_Rate;
}

void ConversionInfo::setRate(double value)
{
    m_Rate = value;
    m_RateIsSet = true;
}

bool ConversionInfo::rateIsSet() const
{
    return m_RateIsSet;
}

void ConversionInfo::unsetRate()
{
    m_RateIsSet = false;
}
}
}
}
}


