/**
 * tradewatch.io
 * Financial market data for Developers
 *
 * The version of the OpenAPI document: 3.1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CursorPage__T_Customized_SymbolsOutFull_.h
 *
 * 
 */

#ifndef IO_TRADEWATCH_CLIENT_MODEL_CursorPage__T_Customized_SymbolsOutFull__H_
#define IO_TRADEWATCH_CLIENT_MODEL_CursorPage__T_Customized_SymbolsOutFull__H_


#include "Tradewatch/ModelBase.h"

#include "Tradewatch/model/SymbolsOutFull.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace tradewatch {
namespace client {
namespace model {

class SymbolsOutFull;


/// <summary>
/// 
/// </summary>
class  CursorPage__T_Customized_SymbolsOutFull_
    : public ModelBase
{
public:
    CursorPage__T_Customized_SymbolsOutFull_();
    virtual ~CursorPage__T_Customized_SymbolsOutFull_();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CursorPage__T_Customized_SymbolsOutFull_ members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SymbolsOutFull>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::vector<std::shared_ptr<SymbolsOutFull>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTotal() const;
    bool totalIsSet() const;
    void unsetTotal();

    void setTotal(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentPage() const;
    bool currentPageIsSet() const;
    void unsetCurrent_page();

    void setCurrentPage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentPageBackwards() const;
    bool currentPageBackwardsIsSet() const;
    void unsetCurrent_page_backwards();

    void setCurrentPageBackwards(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPreviousPage() const;
    bool previousPageIsSet() const;
    void unsetPrevious_page();

    void setPreviousPage(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNextPage() const;
    bool nextPageIsSet() const;
    void unsetNext_page();

    void setNextPage(const utility::string_t& value);


protected:
    std::vector<std::shared_ptr<SymbolsOutFull>> m_Items;
    bool m_ItemsIsSet;
    int32_t m_Total;
    bool m_TotalIsSet;
    utility::string_t m_Current_page;
    bool m_Current_pageIsSet;
    utility::string_t m_Current_page_backwards;
    bool m_Current_page_backwardsIsSet;
    utility::string_t m_Previous_page;
    bool m_Previous_pageIsSet;
    utility::string_t m_Next_page;
    bool m_Next_pageIsSet;
};


}
}
}
}

#endif /* IO_TRADEWATCH_CLIENT_MODEL_CursorPage__T_Customized_SymbolsOutFull__H_ */
